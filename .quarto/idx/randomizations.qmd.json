{"title":"Randomization (Permutations) Tests","markdown":{"yaml":{"title":"Randomization (Permutations) Tests","date-modified":"`r Sys.Date()`"},"headingText":"R Packages and Functions Used","containsRefs":false,"markdown":"\n\n\n\n```{r}\n#| code-fold: false\n\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\ntheme_set(theme_bw())\ntheme_update(axis.title = element_text(size = 24))\n\n\nshuffle <- function(x){\n  n <- length(x)\n  return(sample(x, n))\n}\n\npenguins <- penguins |> drop_na() \n\n```\n\n\n## Permutation Tests\n\nPermutation tests conducts a statistical test by constructing the null distribution by rearranging the data points in a sample. \n\nNull hypothesis states that the rearrangements of the data points **are** random.\n\nAlternative hypothesis states that the rearrangement of the data points **aren't** random.\n\n## Permutation Distributions\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n### Null \n\n$$\nF_x = F_y\n$$\n\n:::\n\n::: {.column width=\"50%\"}\n### Alternative \n\n$$\nF_x \\neq F_y\n$$\n\n:::\n\n::::\n\nSuppose $\\{X_i, Y_i\\}^n_{i=1}$ is an observed permutation, $X = \\{X_1, \\ldots, X_n\\}$, $Y = \\{Y_1, \\ldots, Y_n\\}$.\n\nThe Probability of any permuation is $1/n!$.\n\nTherefore, for a statistic $T(X,Y)$, a sampling distribution can be constructed by all the different permutations.\n\nA hypothesis test can be conducted by observing the proportion of more extreme values of the sample statistic.\n\n## Approximate Permutation Distribution\n\nConstructing the distribution for the permutations can be challenging if the number of permutations is high! If $n=100$, the number of permutations is $100!$:\n\n```{r}\n#| code-fold: false\n#| echo: true\nfactorial(100)\n```\n\nTherefore, simulation techniques are needed to approximate the p-value. \n\nBy randomly drawing from the sample, we can approximate the p-value.\n\n\n### Algorithm\n\n1.    Construct a new data set\n  1.    Fix the predictor ($X$) variable and randomly assign a data point $Y$ to the fixed $X$\n2.    Compute a test statistic using the new data set and store the value\n3.    Repeat steps 1 and 2 for $N$ times\n4.    Compute the test statistic from the empirical sample (un-permutated)\n5.    Count how many permutated statistics that are more extreme than the sample test statistic ($m$)\n6.    Compute the Monte Carlo p-value\n\n$$\np = \\frac{m +1}{N + 1}\n$$\n\n## Example: Emperical Data\n\n```{r}\n#| code-fold: true\npenguins |> ggplot(aes(x=species, y = body_mass_g)) +\n  geom_boxplot() +\n  geom_jitter() +\n  labs(x = \"Species\", y = \"Body Mass\")\n\n```\n\n### Example: Random Shuffling \n\n```{r}\n#| code-fold: true\npenguins |> ggplot() +\n  labs(x = \"Species\", y = \"Body Mass\") + \n  geom_jitter(aes(species, shuffle(body_mass_g)))\n\n```\n\n### Example: Random/Emperical \n\n```{r}\n#| code-fold: true\npenguins |> ggplot(aes(x = species, y = body_mass_g)) +\n  labs(x = \"Species\", y = \"Body Mass\") + \n  geom_jitter(col = \"red\") +\n  geom_jitter(aes(species, shuffle(body_mass_g)))\n\n```\n\n### Example: Random/Emperical \n\n```{r}\n#| code-fold: true\npenguins |> ggplot(aes(x = species, y = body_mass_g)) +\n  labs(x = \"Species\", y = \"Body Mass\") + \n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(col = \"red\") \n```\n\n### ANOVA\n\nWe want to determine if body mass of penguins are different for different species.\n\n```{r}\npenguins |> aov(body_mass_g ~ species, data = _) |> anova()\n```\n\n### Permutation Test\n\n```{r}\nf_stat <- penguins |> \n  aov(body_mass_g ~ species, data = _) |> \n  anova() |> \n  _$`F value`[1]\n  \n\nf_sim <- function(i){\n  ff <- penguins |> \n    aov(shuffle(body_mass_g) ~ species, data = _) |> \n    anova() |> \n    _$`F value`[1]\n  return(ff)\n}\n\nf_dist <- replicate(10000, f_sim(1))\n\ntibble(x= f_dist) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_vline(xintercept = f_stat)\n\nsum(f_stat < f_dist) + 1 / (length(f_dist) + 1)\n\n```\n\n\n## Permutation Example\n\n\n### Permutation Linear Regression\n\n-   Keep the predictor values fixed (unchanged)\n-   Randomly assign the sampled outcome values to a fixed predictor\n-   Compute the regression coefficients for the predictor variable\n\n### Simulated Permutation\n\n\n## Permutations\n\n\n## Permutation Test\n\n","srcMarkdownNoYaml":"\n\n\n## R Packages and Functions Used\n\n```{r}\n#| code-fold: false\n\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\ntheme_set(theme_bw())\ntheme_update(axis.title = element_text(size = 24))\n\n\nshuffle <- function(x){\n  n <- length(x)\n  return(sample(x, n))\n}\n\npenguins <- penguins |> drop_na() \n\n```\n\n\n## Permutation Tests\n\nPermutation tests conducts a statistical test by constructing the null distribution by rearranging the data points in a sample. \n\nNull hypothesis states that the rearrangements of the data points **are** random.\n\nAlternative hypothesis states that the rearrangement of the data points **aren't** random.\n\n## Permutation Distributions\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n### Null \n\n$$\nF_x = F_y\n$$\n\n:::\n\n::: {.column width=\"50%\"}\n### Alternative \n\n$$\nF_x \\neq F_y\n$$\n\n:::\n\n::::\n\nSuppose $\\{X_i, Y_i\\}^n_{i=1}$ is an observed permutation, $X = \\{X_1, \\ldots, X_n\\}$, $Y = \\{Y_1, \\ldots, Y_n\\}$.\n\nThe Probability of any permuation is $1/n!$.\n\nTherefore, for a statistic $T(X,Y)$, a sampling distribution can be constructed by all the different permutations.\n\nA hypothesis test can be conducted by observing the proportion of more extreme values of the sample statistic.\n\n## Approximate Permutation Distribution\n\nConstructing the distribution for the permutations can be challenging if the number of permutations is high! If $n=100$, the number of permutations is $100!$:\n\n```{r}\n#| code-fold: false\n#| echo: true\nfactorial(100)\n```\n\nTherefore, simulation techniques are needed to approximate the p-value. \n\nBy randomly drawing from the sample, we can approximate the p-value.\n\n\n### Algorithm\n\n1.    Construct a new data set\n  1.    Fix the predictor ($X$) variable and randomly assign a data point $Y$ to the fixed $X$\n2.    Compute a test statistic using the new data set and store the value\n3.    Repeat steps 1 and 2 for $N$ times\n4.    Compute the test statistic from the empirical sample (un-permutated)\n5.    Count how many permutated statistics that are more extreme than the sample test statistic ($m$)\n6.    Compute the Monte Carlo p-value\n\n$$\np = \\frac{m +1}{N + 1}\n$$\n\n## Example: Emperical Data\n\n```{r}\n#| code-fold: true\npenguins |> ggplot(aes(x=species, y = body_mass_g)) +\n  geom_boxplot() +\n  geom_jitter() +\n  labs(x = \"Species\", y = \"Body Mass\")\n\n```\n\n### Example: Random Shuffling \n\n```{r}\n#| code-fold: true\npenguins |> ggplot() +\n  labs(x = \"Species\", y = \"Body Mass\") + \n  geom_jitter(aes(species, shuffle(body_mass_g)))\n\n```\n\n### Example: Random/Emperical \n\n```{r}\n#| code-fold: true\npenguins |> ggplot(aes(x = species, y = body_mass_g)) +\n  labs(x = \"Species\", y = \"Body Mass\") + \n  geom_jitter(col = \"red\") +\n  geom_jitter(aes(species, shuffle(body_mass_g)))\n\n```\n\n### Example: Random/Emperical \n\n```{r}\n#| code-fold: true\npenguins |> ggplot(aes(x = species, y = body_mass_g)) +\n  labs(x = \"Species\", y = \"Body Mass\") + \n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(col = \"red\") \n```\n\n### ANOVA\n\nWe want to determine if body mass of penguins are different for different species.\n\n```{r}\npenguins |> aov(body_mass_g ~ species, data = _) |> anova()\n```\n\n### Permutation Test\n\n```{r}\nf_stat <- penguins |> \n  aov(body_mass_g ~ species, data = _) |> \n  anova() |> \n  _$`F value`[1]\n  \n\nf_sim <- function(i){\n  ff <- penguins |> \n    aov(shuffle(body_mass_g) ~ species, data = _) |> \n    anova() |> \n    _$`F value`[1]\n  return(ff)\n}\n\nf_dist <- replicate(10000, f_sim(1))\n\ntibble(x= f_dist) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_vline(xintercept = f_stat)\n\nsum(f_stat < f_dist) + 1 / (length(f_dist) + 1)\n\n```\n\n\n## Permutation Example\n\n\n### Permutation Linear Regression\n\n-   Keep the predictor values fixed (unchanged)\n-   Randomly assign the sampled outcome values to a fixed predictor\n-   Compute the regression coefficients for the predictor variable\n\n### Simulated Permutation\n\n\n## Permutations\n\n\n## Permutation Test\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"randomizations.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","editor":"source","knitr":{"opts_chunk":{"message":false,"warnings":false,"comment":"#>"}},"theme":"cosmo","title":"Randomization (Permutations) Tests","date-modified":"`r Sys.Date()`"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}