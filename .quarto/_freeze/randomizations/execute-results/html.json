{
  "hash": "d7a1d5eeb397111ed196e6a433451806",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Randomization (Permutations) Tests\"\ndate-modified: \"2024-10-14\"\n---\n\n\n\n\n## R Packages and Functions Used\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(palmerpenguins)\n\ntheme_set(theme_bw())\ntheme_update(axis.title = element_text(size = 24))\n\n\nshuffle <- function(x){\n  n <- length(x)\n  return(sample(x, n))\n}\n\npenguins <- penguins |> drop_na() \n```\n:::\n\n\n\n\n## Permutation Tests\n\nPermutation tests conducts a statistical test by constructing the null distribution by rearranging the data points in a sample. \n\nNull hypothesis states that the rearrangements of the data points **are** random.\n\nAlternative hypothesis states that the rearrangement of the data points **aren't** random.\n\n## Permutation Distributions\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n### Null \n\n$$\nF_x = F_y\n$$\n\n:::\n\n::: {.column width=\"50%\"}\n### Alternative \n\n$$\nF_x \\neq F_y\n$$\n\n:::\n\n::::\n\nSuppose $\\{X_i, Y_i\\}^n_{i=1}$ is an observed permutation, $X = \\{X_1, \\ldots, X_n\\}$, $Y = \\{Y_1, \\ldots, Y_n\\}$.\n\nThe Probability of any permuation is $1/n!$.\n\nTherefore, for a statistic $T(X,Y)$, a sampling distribution can be constructed by all the different permutations.\n\nA hypothesis test can be conducted by observing the proportion of more extreme values of the sample statistic.\n\n## Approximate Permutation Distribution\n\nConstructing the distribution for the permutations can be challenging if the number of permutations is high! If $n=100$, the number of permutations is $100!$:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nfactorial(100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.332622e+157\n```\n\n\n:::\n:::\n\n\n\nTherefore, simulation techniques are needed to approximate the p-value. \n\nBy randomly drawing from the sample, we can approximate the p-value.\n\n\n### Algorithm\n\n1.    Construct a new data set\n  1.    Fix the predictor ($X$) variable and randomly assign a data point $Y$ to the fixed $X$\n2.    Compute a test statistic using the new data set and store the value\n3.    Repeat steps 1 and 2 for $N$ times\n4.    Compute the test statistic from the empirical sample (un-permutated)\n5.    Count how many permutated statistics that are more extreme than the sample test statistic ($m$)\n6.    Compute the Monte Carlo p-value\n\n$$\np = \\frac{m +1}{N + 1}\n$$\n\n## Example: Emperical Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npenguins |> ggplot(aes(x=species, y = body_mass_g)) +\n  geom_boxplot() +\n  geom_jitter() +\n  labs(x = \"Species\", y = \"Body Mass\")\n```\n\n::: {.cell-output-display}\n![](randomizations_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### Example: Random Shuffling \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npenguins |> ggplot() +\n  labs(x = \"Species\", y = \"Body Mass\") + \n  geom_jitter(aes(species, shuffle(body_mass_g)))\n```\n\n::: {.cell-output-display}\n![](randomizations_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n### Example: Random/Emperical \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npenguins |> ggplot(aes(x = species, y = body_mass_g)) +\n  labs(x = \"Species\", y = \"Body Mass\") + \n  geom_jitter(col = \"red\") +\n  geom_jitter(aes(species, shuffle(body_mass_g)))\n```\n\n::: {.cell-output-display}\n![](randomizations_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n### Example: Random/Emperical \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npenguins |> ggplot(aes(x = species, y = body_mass_g)) +\n  labs(x = \"Species\", y = \"Body Mass\") + \n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(aes(species, shuffle(body_mass_g))) +\n  geom_jitter(col = \"red\") \n```\n\n::: {.cell-output-display}\n![](randomizations_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### ANOVA\n\nWe want to determine if body mass of penguins are different for different species.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> aov(body_mass_g ~ species, data = _) |> anova()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: body_mass_g\n           Df    Sum Sq  Mean Sq F value    Pr(>F)    \nspecies     2 145190219 72595110  341.89 < 2.2e-16 ***\nResiduals 330  70069447   212332                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n### Permutation Test\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf_stat <- penguins |> \n  aov(body_mass_g ~ species, data = _) |> \n  anova() |> \n  _$`F value`[1]\n  \n\nf_sim <- function(i){\n  ff <- penguins |> \n    aov(shuffle(body_mass_g) ~ species, data = _) |> \n    anova() |> \n    _$`F value`[1]\n  return(ff)\n}\n\nf_dist <- replicate(10000, f_sim(1))\n\ntibble(x= f_dist) |> \n  ggplot(aes(x, y = ..density..)) +\n  geom_histogram() +\n  geom_vline(xintercept = f_stat)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](randomizations_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsum(f_stat < f_dist) + 1 / (length(f_dist) + 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.999e-05\n```\n\n\n:::\n:::\n\n\n\n\n## Permutation Example\n\n\n### Permutation Linear Regression\n\n-   Keep the predictor values fixed (unchanged)\n-   Randomly assign the sampled outcome values to a fixed predictor\n-   Compute the regression coefficients for the predictor variable\n\n### Simulated Permutation\n\n\n## Permutations\n\n\n## Permutation Test\n\n",
    "supporting": [
      "randomizations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}